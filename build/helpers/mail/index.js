const nodemailer = require("nodemailer");
const hbs = require("nodemailer-express-handlebars");
const path = require("path");
require("dotenv").config();
const sendMail = data => new Promise((resolve, reject) => {
  const transporter = nodemailer.createTransport({
    host: "smtp.gmail.com",
    port: 587,
    secure: false,
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASSWORD
    }
  });
  transporter.use("compile", hbs({
    viewEngine: {
      extName: ".html",
      partialsDir: path.resolve("./src/templates/email"),
      defaultLayout: false
    },
    viewPath: path.resolve("./src/templates/email"),
    extName: ".html"
  }));
  const mailOptions = {
    from: `"Coffee-Brings App" <mailtes260@gmail.com>`,
    to: data.to,
    subject: data.subject,
    template: data.template,
    context: data.data
  };

  // if (data.attachment) {
  //   if (data.attachment.length > 0) {
  //     mailOptions.attachment = data.attachment;
  //   }
  // }

  transporter.sendMail(mailOptions, (err, info) => {
    if (err) {
      reject(err);
    } else {
      resolve(info.response);
    }
  });
});
module.exports = sendMail;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJub2RlbWFpbGVyIiwicmVxdWlyZSIsImhicyIsInBhdGgiLCJjb25maWciLCJzZW5kTWFpbCIsImRhdGEiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInRyYW5zcG9ydGVyIiwiY3JlYXRlVHJhbnNwb3J0IiwiaG9zdCIsInBvcnQiLCJzZWN1cmUiLCJhdXRoIiwidXNlciIsInByb2Nlc3MiLCJlbnYiLCJFTUFJTF9VU0VSIiwicGFzcyIsIkVNQUlMX1BBU1NXT1JEIiwidXNlIiwidmlld0VuZ2luZSIsImV4dE5hbWUiLCJwYXJ0aWFsc0RpciIsImRlZmF1bHRMYXlvdXQiLCJ2aWV3UGF0aCIsIm1haWxPcHRpb25zIiwiZnJvbSIsInRvIiwic3ViamVjdCIsInRlbXBsYXRlIiwiY29udGV4dCIsImVyciIsImluZm8iLCJyZXNwb25zZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaGVscGVycy9tYWlsL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG5vZGVtYWlsZXIgPSByZXF1aXJlKFwibm9kZW1haWxlclwiKTtcbmNvbnN0IGhicyA9IHJlcXVpcmUoXCJub2RlbWFpbGVyLWV4cHJlc3MtaGFuZGxlYmFyc1wiKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcbnJlcXVpcmUoXCJkb3RlbnZcIikuY29uZmlnKCk7XG5cbmNvbnN0IHNlbmRNYWlsID0gKGRhdGEpID0+XG4gIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCB0cmFuc3BvcnRlciA9IG5vZGVtYWlsZXIuY3JlYXRlVHJhbnNwb3J0KHtcbiAgICAgIGhvc3Q6IFwic210cC5nbWFpbC5jb21cIixcbiAgICAgIHBvcnQ6IDU4NyxcbiAgICAgIHNlY3VyZTogZmFsc2UsXG4gICAgICBhdXRoOiB7XG4gICAgICAgIHVzZXI6IHByb2Nlc3MuZW52LkVNQUlMX1VTRVIsXG4gICAgICAgIHBhc3M6IHByb2Nlc3MuZW52LkVNQUlMX1BBU1NXT1JELFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIHRyYW5zcG9ydGVyLnVzZShcbiAgICAgIFwiY29tcGlsZVwiLFxuICAgICAgaGJzKHtcbiAgICAgICAgdmlld0VuZ2luZToge1xuICAgICAgICAgIGV4dE5hbWU6IFwiLmh0bWxcIixcbiAgICAgICAgICBwYXJ0aWFsc0RpcjogcGF0aC5yZXNvbHZlKFwiLi9zcmMvdGVtcGxhdGVzL2VtYWlsXCIpLFxuICAgICAgICAgIGRlZmF1bHRMYXlvdXQ6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICB2aWV3UGF0aDogcGF0aC5yZXNvbHZlKFwiLi9zcmMvdGVtcGxhdGVzL2VtYWlsXCIpLFxuICAgICAgICBleHROYW1lOiBcIi5odG1sXCIsXG4gICAgICB9KVxuICAgICk7XG5cbiAgICBjb25zdCBtYWlsT3B0aW9ucyA9IHtcbiAgICAgIGZyb206IGBcIkNvZmZlZS1CcmluZ3MgQXBwXCIgPG1haWx0ZXMyNjBAZ21haWwuY29tPmAsXG4gICAgICB0bzogZGF0YS50byxcbiAgICAgIHN1YmplY3Q6IGRhdGEuc3ViamVjdCxcbiAgICAgIHRlbXBsYXRlOiBkYXRhLnRlbXBsYXRlLFxuICAgICAgY29udGV4dDogZGF0YS5kYXRhLFxuICAgIH07XG5cbiAgICAvLyBpZiAoZGF0YS5hdHRhY2htZW50KSB7XG4gICAgLy8gICBpZiAoZGF0YS5hdHRhY2htZW50Lmxlbmd0aCA+IDApIHtcbiAgICAvLyAgICAgbWFpbE9wdGlvbnMuYXR0YWNobWVudCA9IGRhdGEuYXR0YWNobWVudDtcbiAgICAvLyAgIH1cbiAgICAvLyB9XG5cbiAgICB0cmFuc3BvcnRlci5zZW5kTWFpbChtYWlsT3B0aW9ucywgKGVyciwgaW5mbykgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUoaW5mby5yZXNwb25zZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNlbmRNYWlsO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxVQUFVLEdBQUdDLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDeEMsTUFBTUMsR0FBRyxHQUFHRCxPQUFPLENBQUMsK0JBQStCLENBQUM7QUFDcEQsTUFBTUUsSUFBSSxHQUFHRixPQUFPLENBQUMsTUFBTSxDQUFDO0FBQzVCQSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUNHLE1BQU0sQ0FBQyxDQUFDO0FBRTFCLE1BQU1DLFFBQVEsR0FBSUMsSUFBSSxJQUNwQixJQUFJQyxPQUFPLENBQUMsQ0FBQ0MsT0FBTyxFQUFFQyxNQUFNLEtBQUs7RUFDL0IsTUFBTUMsV0FBVyxHQUFHVixVQUFVLENBQUNXLGVBQWUsQ0FBQztJQUM3Q0MsSUFBSSxFQUFFLGdCQUFnQjtJQUN0QkMsSUFBSSxFQUFFLEdBQUc7SUFDVEMsTUFBTSxFQUFFLEtBQUs7SUFDYkMsSUFBSSxFQUFFO01BQ0pDLElBQUksRUFBRUMsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFVBQVU7TUFDNUJDLElBQUksRUFBRUgsT0FBTyxDQUFDQyxHQUFHLENBQUNHO0lBQ3BCO0VBQ0YsQ0FBQyxDQUFDO0VBRUZYLFdBQVcsQ0FBQ1ksR0FBRyxDQUNiLFNBQVMsRUFDVHBCLEdBQUcsQ0FBQztJQUNGcUIsVUFBVSxFQUFFO01BQ1ZDLE9BQU8sRUFBRSxPQUFPO01BQ2hCQyxXQUFXLEVBQUV0QixJQUFJLENBQUNLLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztNQUNsRGtCLGFBQWEsRUFBRTtJQUNqQixDQUFDO0lBQ0RDLFFBQVEsRUFBRXhCLElBQUksQ0FBQ0ssT0FBTyxDQUFDLHVCQUF1QixDQUFDO0lBQy9DZ0IsT0FBTyxFQUFFO0VBQ1gsQ0FBQyxDQUNILENBQUM7RUFFRCxNQUFNSSxXQUFXLEdBQUc7SUFDbEJDLElBQUksRUFBRyw0Q0FBMkM7SUFDbERDLEVBQUUsRUFBRXhCLElBQUksQ0FBQ3dCLEVBQUU7SUFDWEMsT0FBTyxFQUFFekIsSUFBSSxDQUFDeUIsT0FBTztJQUNyQkMsUUFBUSxFQUFFMUIsSUFBSSxDQUFDMEIsUUFBUTtJQUN2QkMsT0FBTyxFQUFFM0IsSUFBSSxDQUFDQTtFQUNoQixDQUFDOztFQUVEO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7O0VBRUFJLFdBQVcsQ0FBQ0wsUUFBUSxDQUFDdUIsV0FBVyxFQUFFLENBQUNNLEdBQUcsRUFBRUMsSUFBSSxLQUFLO0lBQy9DLElBQUlELEdBQUcsRUFBRTtNQUNQekIsTUFBTSxDQUFDeUIsR0FBRyxDQUFDO0lBQ2IsQ0FBQyxNQUFNO01BQ0wxQixPQUFPLENBQUMyQixJQUFJLENBQUNDLFFBQVEsQ0FBQztJQUN4QjtFQUNGLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVKQyxNQUFNLENBQUNDLE9BQU8sR0FBR2pDLFFBQVEifQ==
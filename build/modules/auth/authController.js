require("dotenv").config();
const authModel = require("./authModel");
const helperWrapper = require("../../helpers/wrapper");
const sendMailForgot = require("../../helpers/mail");
const bcrypt = require("bcrypt");
const {
  v4: uuidv4
} = require("uuid");
const userModel = require("../user/userModel");
const generateKey = () => {
  const res = Math.floor(100000 + Math.random() * 900000);
  return res;
};
const bcryptjs = require("bcrypt");
const jwt = require("jsonwebtoken");
const sendMail = require("../../helpers/email");
module.exports = {
  register: async (req, res) => {
    try {
      const {
        email,
        password,
        phoneNumber
      } = req.body;
      const checkUser = await authModel.getUserByEmail(email);
      if (email.length < 1 || password.length < 1 || phoneNumber.length < 1) {
        return helperWrapper.response(res, 400, "All input must be filled", null);
      }
      if (checkUser.length > 0) {
        return helperWrapper.response(res, 409, "Email already used", null);
      }
      if (password.length < 6) {
        return helperWrapper.response(res, 400, "Password must be more than 6 character");
      }
      // PROSES ENCRYPT PASSWORD
      const hashPassword = await bcryptjs.hash(password, 10);
      const setData = {
        id: uuidv4(),
        email,
        password: hashPassword,
        phoneNumber,
        role: "user",
        status: "active"
      };
      const result = await authModel.register(setData);

      // const setDataMail = {
      //   to: result.email,
      //   subject: "Email Verification",
      //   template: "email-verification",
      //   data: {
      //     id: result.id,
      //     email: result.email,
      //     link: process.env.URL_BACKEND,
      //   },
      // };

      // await sendMail(setDataMail);
      return helperWrapper.response(res, 200, "Success register user, please verify your email", result);
    } catch (error) {
      return helperWrapper.response(res, 400, `Bad Request, ${error.message}`, null);
    }
  },
  verifyUser: async (req, res) => {
    try {
      const {
        id
      } = req.params;
      const result = await userModel.getUserById(id);
      if (result.length < 1) {
        return helperWrapper.response(res, 404, `User by id ${id} not found`, null);
      }
      await authModel.verifyUser("active", id);
      return helperWrapper.response(res, 200, "Email verification success");
    } catch (error) {
      return helperWrapper.response(res, 400, `Bad Request, ${error.message}`, null);
    }
  },
  login: async (req, res) => {
    try {
      const {
        email,
        password
      } = req.body;
      const checkUser = await authModel.getUserByEmail(email);
      if (email.length < 1 || password.length < 1) {
        return helperWrapper.response(res, 400, "All input must be filled", null);
      }
      if (checkUser.length < 1) {
        return helperWrapper.response(res, 404, "Email is not registered", null);
      }
      if (checkUser[0].status !== "active") {
        return helperWrapper.response(res, 400, `Please verify email first`, null);
      }
      const matchPassword = await bcryptjs.compare(password, checkUser[0].password);
      if (!matchPassword) {
        return helperWrapper.response(res, 400, "Wrong password", null);
      }
      const payload = checkUser[0];
      delete payload.password;
      const token = jwt.sign({
        ...payload
      }, process.env.SECRET_KEY, {
        expiresIn: "3h"
      });
      return helperWrapper.response(res, 200, "Success login", {
        id: payload.id,
        token
      });
    } catch (error) {
      return helperWrapper.response(res, 400, `Bad Request ${error.message}`);
    }
  },
  forgotPassword: async (req, res) => {
    try {
      const {
        email,
        linkRedirect
      } = req.body;
      const keysChangePassword = generateKey();

      // CHECK USER BY EMAIL
      const checkUser = await authModel.getDataConditions({
        email
      });
      if (checkUser.length < 1) {
        return helperWrapper.response(res, 400, "Email / Account not registed", null);
      }
      // ======

      await authModel.updateDataUser({
        keysChangePassword,
        updatedAt: new Date()
      }, checkUser[0].id);
      const setSendEmail = {
        to: email,
        subject: `Reset Password !`,
        template: "email-forgot-password",
        data: {
          name: checkUser[0].firstName || "my friend",
          buttonUrl: `${linkRedirect}/auth/forgot-password/${keysChangePassword}`
        }
      };
      await sendMailForgot(setSendEmail);
      return helperWrapper.response(res, 200, "Process success, please check your email !", email);
    } catch (err) {
      return helperWrapper.response(res, 400, `Bad request (${err.message})`, null);
    }
  },
  resetPassword: async (req, res) => {
    try {
      const {
        keysChangePassword,
        newPassword,
        confirmPassword
      } = req.body;
      const checkUser = await authModel.getDataConditions({
        keysChangePassword
      });
      if (checkUser.length < 1) {
        return helperWrapper.response(res, 400, "Your keys is not valid, please repeat step forgot password", null);
      }
      const {
        id,
        minuteDiff
      } = checkUser[0];
      if (minuteDiff < -5) {
        await authModel.updateDataUser({
          keysChangePassword: null,
          updatedAt: new Date()
        }, id);
        return helperWrapper.response(res, 400, "Your keys is expired, please repeat step forgot password", null);
      }
      if (newPassword.length < 6) {
        return helperWrapper.response(res, 400, "Password must be more than 6 character");
      }
      if (newPassword !== confirmPassword) {
        return helperWrapper.response(res, 400, "Password not same", null);
      }
      const salt = bcrypt.genSaltSync(10);
      const encryptPassword = bcrypt.hashSync(newPassword, salt);
      await authModel.updateDataUser({
        keysChangePassword: null,
        password: encryptPassword,
        updatedAt: new Date()
      }, id);
      return helperWrapper.response(res, 200, "Success change password", {
        id
      });
    } catch (err) {
      return helperWrapper.response(res, 400, `Bad request (${err.message})`, null);
    }
  },
  logout: async (req, res) => {
    try {
      let token = req.headers.authorization;
      token = token.split(" ")[1];
      return helperWrapper.response(res, 200, "Success logout", null);
    } catch (err) {
      return helperWrapper.response(res, 400, `Bad Request (${err.message})`, null);
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiY29uZmlnIiwiYXV0aE1vZGVsIiwiaGVscGVyV3JhcHBlciIsInNlbmRNYWlsRm9yZ290IiwiYmNyeXB0IiwidjQiLCJ1dWlkdjQiLCJ1c2VyTW9kZWwiLCJnZW5lcmF0ZUtleSIsInJlcyIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImJjcnlwdGpzIiwiand0Iiwic2VuZE1haWwiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVnaXN0ZXIiLCJyZXEiLCJlbWFpbCIsInBhc3N3b3JkIiwicGhvbmVOdW1iZXIiLCJib2R5IiwiY2hlY2tVc2VyIiwiZ2V0VXNlckJ5RW1haWwiLCJsZW5ndGgiLCJyZXNwb25zZSIsImhhc2hQYXNzd29yZCIsImhhc2giLCJzZXREYXRhIiwiaWQiLCJyb2xlIiwic3RhdHVzIiwicmVzdWx0IiwiZXJyb3IiLCJtZXNzYWdlIiwidmVyaWZ5VXNlciIsInBhcmFtcyIsImdldFVzZXJCeUlkIiwibG9naW4iLCJtYXRjaFBhc3N3b3JkIiwiY29tcGFyZSIsInBheWxvYWQiLCJ0b2tlbiIsInNpZ24iLCJwcm9jZXNzIiwiZW52IiwiU0VDUkVUX0tFWSIsImV4cGlyZXNJbiIsImZvcmdvdFBhc3N3b3JkIiwibGlua1JlZGlyZWN0Iiwia2V5c0NoYW5nZVBhc3N3b3JkIiwiZ2V0RGF0YUNvbmRpdGlvbnMiLCJ1cGRhdGVEYXRhVXNlciIsInVwZGF0ZWRBdCIsIkRhdGUiLCJzZXRTZW5kRW1haWwiLCJ0byIsInN1YmplY3QiLCJ0ZW1wbGF0ZSIsImRhdGEiLCJuYW1lIiwiZmlyc3ROYW1lIiwiYnV0dG9uVXJsIiwiZXJyIiwicmVzZXRQYXNzd29yZCIsIm5ld1Bhc3N3b3JkIiwiY29uZmlybVBhc3N3b3JkIiwibWludXRlRGlmZiIsInNhbHQiLCJnZW5TYWx0U3luYyIsImVuY3J5cHRQYXNzd29yZCIsImhhc2hTeW5jIiwibG9nb3V0IiwiaGVhZGVycyIsImF1dGhvcml6YXRpb24iLCJzcGxpdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2R1bGVzL2F1dGgvYXV0aENvbnRyb2xsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZShcImRvdGVudlwiKS5jb25maWcoKTtcbmNvbnN0IGF1dGhNb2RlbCA9IHJlcXVpcmUoXCIuL2F1dGhNb2RlbFwiKTtcbmNvbnN0IGhlbHBlcldyYXBwZXIgPSByZXF1aXJlKFwiLi4vLi4vaGVscGVycy93cmFwcGVyXCIpO1xuY29uc3Qgc2VuZE1haWxGb3Jnb3QgPSByZXF1aXJlKFwiLi4vLi4vaGVscGVycy9tYWlsXCIpO1xuY29uc3QgYmNyeXB0ID0gcmVxdWlyZShcImJjcnlwdFwiKTtcbmNvbnN0IHsgdjQ6IHV1aWR2NCB9ID0gcmVxdWlyZShcInV1aWRcIik7XG5jb25zdCB1c2VyTW9kZWwgPSByZXF1aXJlKFwiLi4vdXNlci91c2VyTW9kZWxcIik7XG5cbmNvbnN0IGdlbmVyYXRlS2V5ID0gKCkgPT4ge1xuICBjb25zdCByZXMgPSBNYXRoLmZsb29yKDEwMDAwMCArIE1hdGgucmFuZG9tKCkgKiA5MDAwMDApO1xuICByZXR1cm4gcmVzO1xufTtcblxuY29uc3QgYmNyeXB0anMgPSByZXF1aXJlKFwiYmNyeXB0XCIpO1xuY29uc3Qgand0ID0gcmVxdWlyZShcImpzb253ZWJ0b2tlblwiKTtcbmNvbnN0IHNlbmRNYWlsID0gcmVxdWlyZShcIi4uLy4uL2hlbHBlcnMvZW1haWxcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZWdpc3RlcjogYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZW1haWwsIHBhc3N3b3JkLCBwaG9uZU51bWJlciB9ID0gcmVxLmJvZHk7XG4gICAgICBjb25zdCBjaGVja1VzZXIgPSBhd2FpdCBhdXRoTW9kZWwuZ2V0VXNlckJ5RW1haWwoZW1haWwpO1xuICAgICAgaWYgKGVtYWlsLmxlbmd0aCA8IDEgfHwgcGFzc3dvcmQubGVuZ3RoIDwgMSB8fCBwaG9uZU51bWJlci5sZW5ndGggPCAxKSB7XG4gICAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKFxuICAgICAgICAgIHJlcyxcbiAgICAgICAgICA0MDAsXG4gICAgICAgICAgXCJBbGwgaW5wdXQgbXVzdCBiZSBmaWxsZWRcIixcbiAgICAgICAgICBudWxsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoY2hlY2tVc2VyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UocmVzLCA0MDksIFwiRW1haWwgYWxyZWFkeSB1c2VkXCIsIG51bGwpO1xuICAgICAgfVxuICAgICAgaWYgKHBhc3N3b3JkLmxlbmd0aCA8IDYpIHtcbiAgICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UoXG4gICAgICAgICAgcmVzLFxuICAgICAgICAgIDQwMCxcbiAgICAgICAgICBcIlBhc3N3b3JkIG11c3QgYmUgbW9yZSB0aGFuIDYgY2hhcmFjdGVyXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIC8vIFBST1NFUyBFTkNSWVBUIFBBU1NXT1JEXG4gICAgICBjb25zdCBoYXNoUGFzc3dvcmQgPSBhd2FpdCBiY3J5cHRqcy5oYXNoKHBhc3N3b3JkLCAxMCk7XG4gICAgICBjb25zdCBzZXREYXRhID0ge1xuICAgICAgICBpZDogdXVpZHY0KCksXG4gICAgICAgIGVtYWlsLFxuICAgICAgICBwYXNzd29yZDogaGFzaFBhc3N3b3JkLFxuICAgICAgICBwaG9uZU51bWJlcixcbiAgICAgICAgcm9sZTogXCJ1c2VyXCIsXG4gICAgICAgIHN0YXR1czogXCJhY3RpdmVcIlxuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXV0aE1vZGVsLnJlZ2lzdGVyKHNldERhdGEpO1xuXG4gICAgICAvLyBjb25zdCBzZXREYXRhTWFpbCA9IHtcbiAgICAgIC8vICAgdG86IHJlc3VsdC5lbWFpbCxcbiAgICAgIC8vICAgc3ViamVjdDogXCJFbWFpbCBWZXJpZmljYXRpb25cIixcbiAgICAgIC8vICAgdGVtcGxhdGU6IFwiZW1haWwtdmVyaWZpY2F0aW9uXCIsXG4gICAgICAvLyAgIGRhdGE6IHtcbiAgICAgIC8vICAgICBpZDogcmVzdWx0LmlkLFxuICAgICAgLy8gICAgIGVtYWlsOiByZXN1bHQuZW1haWwsXG4gICAgICAvLyAgICAgbGluazogcHJvY2Vzcy5lbnYuVVJMX0JBQ0tFTkQsXG4gICAgICAvLyAgIH0sXG4gICAgICAvLyB9O1xuXG4gICAgICAvLyBhd2FpdCBzZW5kTWFpbChzZXREYXRhTWFpbCk7XG4gICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShcbiAgICAgICAgcmVzLFxuICAgICAgICAyMDAsXG4gICAgICAgIFwiU3VjY2VzcyByZWdpc3RlciB1c2VyLCBwbGVhc2UgdmVyaWZ5IHlvdXIgZW1haWxcIixcbiAgICAgICAgcmVzdWx0XG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShcbiAgICAgICAgcmVzLFxuICAgICAgICA0MDAsXG4gICAgICAgIGBCYWQgUmVxdWVzdCwgJHtlcnJvci5tZXNzYWdlfWAsXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgfVxuICB9LFxuICB2ZXJpZnlVc2VyOiBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBpZCB9ID0gcmVxLnBhcmFtcztcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlck1vZGVsLmdldFVzZXJCeUlkKGlkKTtcbiAgICAgIGlmIChyZXN1bHQubGVuZ3RoIDwgMSkge1xuICAgICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShcbiAgICAgICAgICByZXMsXG4gICAgICAgICAgNDA0LFxuICAgICAgICAgIGBVc2VyIGJ5IGlkICR7aWR9IG5vdCBmb3VuZGAsXG4gICAgICAgICAgbnVsbFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBhd2FpdCBhdXRoTW9kZWwudmVyaWZ5VXNlcihcImFjdGl2ZVwiLCBpZCk7XG4gICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShyZXMsIDIwMCwgXCJFbWFpbCB2ZXJpZmljYXRpb24gc3VjY2Vzc1wiKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UoXG4gICAgICAgIHJlcyxcbiAgICAgICAgNDAwLFxuICAgICAgICBgQmFkIFJlcXVlc3QsICR7ZXJyb3IubWVzc2FnZX1gLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgIH1cbiAgfSxcbiAgbG9naW46IGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCB9ID0gcmVxLmJvZHk7XG4gICAgICBjb25zdCBjaGVja1VzZXIgPSBhd2FpdCBhdXRoTW9kZWwuZ2V0VXNlckJ5RW1haWwoZW1haWwpO1xuICAgICAgaWYgKGVtYWlsLmxlbmd0aCA8IDEgfHwgcGFzc3dvcmQubGVuZ3RoIDwgMSkge1xuICAgICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShcbiAgICAgICAgICByZXMsXG4gICAgICAgICAgNDAwLFxuICAgICAgICAgIFwiQWxsIGlucHV0IG11c3QgYmUgZmlsbGVkXCIsXG4gICAgICAgICAgbnVsbFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGNoZWNrVXNlci5sZW5ndGggPCAxKSB7XG4gICAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKFxuICAgICAgICAgIHJlcyxcbiAgICAgICAgICA0MDQsXG4gICAgICAgICAgXCJFbWFpbCBpcyBub3QgcmVnaXN0ZXJlZFwiLFxuICAgICAgICAgIG51bGxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoZWNrVXNlclswXS5zdGF0dXMgIT09IFwiYWN0aXZlXCIpIHtcbiAgICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UoXG4gICAgICAgICAgcmVzLFxuICAgICAgICAgIDQwMCxcbiAgICAgICAgICBgUGxlYXNlIHZlcmlmeSBlbWFpbCBmaXJzdGAsXG4gICAgICAgICAgbnVsbFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBtYXRjaFBhc3N3b3JkID0gYXdhaXQgYmNyeXB0anMuY29tcGFyZShcbiAgICAgICAgcGFzc3dvcmQsXG4gICAgICAgIGNoZWNrVXNlclswXS5wYXNzd29yZFxuICAgICAgKTtcbiAgICAgIGlmICghbWF0Y2hQYXNzd29yZCkge1xuICAgICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShyZXMsIDQwMCwgXCJXcm9uZyBwYXNzd29yZFwiLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBheWxvYWQgPSBjaGVja1VzZXJbMF07XG4gICAgICBkZWxldGUgcGF5bG9hZC5wYXNzd29yZDtcbiAgICAgIGNvbnN0IHRva2VuID0gand0LnNpZ24oeyAuLi5wYXlsb2FkIH0sIHByb2Nlc3MuZW52LlNFQ1JFVF9LRVksIHtcbiAgICAgICAgZXhwaXJlc0luOiBcIjNoXCIsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKHJlcywgMjAwLCBcIlN1Y2Nlc3MgbG9naW5cIiwge1xuICAgICAgICBpZDogcGF5bG9hZC5pZCxcbiAgICAgICAgdG9rZW4sXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UocmVzLCA0MDAsIGBCYWQgUmVxdWVzdCAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgfVxuICB9LFxuICBmb3Jnb3RQYXNzd29yZDogYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZW1haWwsIGxpbmtSZWRpcmVjdCB9ID0gcmVxLmJvZHk7XG4gICAgICBjb25zdCBrZXlzQ2hhbmdlUGFzc3dvcmQgPSBnZW5lcmF0ZUtleSgpO1xuXG4gICAgICAvLyBDSEVDSyBVU0VSIEJZIEVNQUlMXG4gICAgICBjb25zdCBjaGVja1VzZXIgPSBhd2FpdCBhdXRoTW9kZWwuZ2V0RGF0YUNvbmRpdGlvbnMoeyBlbWFpbCB9KTtcbiAgICAgIGlmIChjaGVja1VzZXIubGVuZ3RoIDwgMSkge1xuICAgICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShcbiAgICAgICAgICByZXMsXG4gICAgICAgICAgNDAwLFxuICAgICAgICAgIFwiRW1haWwgLyBBY2NvdW50IG5vdCByZWdpc3RlZFwiLFxuICAgICAgICAgIG51bGxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIC8vID09PT09PVxuXG4gICAgICBhd2FpdCBhdXRoTW9kZWwudXBkYXRlRGF0YVVzZXIoXG4gICAgICAgIHsga2V5c0NoYW5nZVBhc3N3b3JkLCB1cGRhdGVkQXQ6IG5ldyBEYXRlKCkgfSxcbiAgICAgICAgY2hlY2tVc2VyWzBdLmlkXG4gICAgICApO1xuXG4gICAgICBjb25zdCBzZXRTZW5kRW1haWwgPSB7XG4gICAgICAgIHRvOiBlbWFpbCxcbiAgICAgICAgc3ViamVjdDogYFJlc2V0IFBhc3N3b3JkICFgLFxuICAgICAgICB0ZW1wbGF0ZTogXCJlbWFpbC1mb3Jnb3QtcGFzc3dvcmRcIixcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIG5hbWU6IGNoZWNrVXNlclswXS5maXJzdE5hbWUgfHwgXCJteSBmcmllbmRcIixcbiAgICAgICAgICBidXR0b25Vcmw6IGAke2xpbmtSZWRpcmVjdH0vYXV0aC9mb3Jnb3QtcGFzc3dvcmQvJHtrZXlzQ2hhbmdlUGFzc3dvcmR9YCxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIGF3YWl0IHNlbmRNYWlsRm9yZ290KHNldFNlbmRFbWFpbCk7XG5cbiAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKFxuICAgICAgICByZXMsXG4gICAgICAgIDIwMCxcbiAgICAgICAgXCJQcm9jZXNzIHN1Y2Nlc3MsIHBsZWFzZSBjaGVjayB5b3VyIGVtYWlsICFcIixcbiAgICAgICAgZW1haWxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShcbiAgICAgICAgcmVzLFxuICAgICAgICA0MDAsXG4gICAgICAgIGBCYWQgcmVxdWVzdCAoJHtlcnIubWVzc2FnZX0pYCxcbiAgICAgICAgbnVsbFxuICAgICAgKTtcbiAgICB9XG4gIH0sXG5cbiAgcmVzZXRQYXNzd29yZDogYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsga2V5c0NoYW5nZVBhc3N3b3JkLCBuZXdQYXNzd29yZCwgY29uZmlybVBhc3N3b3JkIH0gPSByZXEuYm9keTtcblxuICAgICAgY29uc3QgY2hlY2tVc2VyID0gYXdhaXQgYXV0aE1vZGVsLmdldERhdGFDb25kaXRpb25zKHtcbiAgICAgICAga2V5c0NoYW5nZVBhc3N3b3JkLFxuICAgICAgfSk7XG4gICAgICBpZiAoY2hlY2tVc2VyLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UoXG4gICAgICAgICAgcmVzLFxuICAgICAgICAgIDQwMCxcbiAgICAgICAgICBcIllvdXIga2V5cyBpcyBub3QgdmFsaWQsIHBsZWFzZSByZXBlYXQgc3RlcCBmb3Jnb3QgcGFzc3dvcmRcIixcbiAgICAgICAgICBudWxsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHsgaWQsIG1pbnV0ZURpZmYgfSA9IGNoZWNrVXNlclswXTtcbiAgICAgIGlmIChtaW51dGVEaWZmIDwgLTUpIHtcbiAgICAgICAgYXdhaXQgYXV0aE1vZGVsLnVwZGF0ZURhdGFVc2VyKFxuICAgICAgICAgIHsga2V5c0NoYW5nZVBhc3N3b3JkOiBudWxsLCB1cGRhdGVkQXQ6IG5ldyBEYXRlKCkgfSxcbiAgICAgICAgICBpZFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShcbiAgICAgICAgICByZXMsXG4gICAgICAgICAgNDAwLFxuICAgICAgICAgIFwiWW91ciBrZXlzIGlzIGV4cGlyZWQsIHBsZWFzZSByZXBlYXQgc3RlcCBmb3Jnb3QgcGFzc3dvcmRcIixcbiAgICAgICAgICBudWxsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXdQYXNzd29yZC5sZW5ndGggPCA2KSB7XG4gICAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKFxuICAgICAgICAgIHJlcyxcbiAgICAgICAgICA0MDAsXG4gICAgICAgICAgXCJQYXNzd29yZCBtdXN0IGJlIG1vcmUgdGhhbiA2IGNoYXJhY3RlclwiXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXdQYXNzd29yZCAhPT0gY29uZmlybVBhc3N3b3JkKSB7XG4gICAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKHJlcywgNDAwLCBcIlBhc3N3b3JkIG5vdCBzYW1lXCIsIG51bGwpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzYWx0ID0gYmNyeXB0LmdlblNhbHRTeW5jKDEwKTtcbiAgICAgIGNvbnN0IGVuY3J5cHRQYXNzd29yZCA9IGJjcnlwdC5oYXNoU3luYyhuZXdQYXNzd29yZCwgc2FsdCk7XG5cbiAgICAgIGF3YWl0IGF1dGhNb2RlbC51cGRhdGVEYXRhVXNlcihcbiAgICAgICAge1xuICAgICAgICAgIGtleXNDaGFuZ2VQYXNzd29yZDogbnVsbCxcbiAgICAgICAgICBwYXNzd29yZDogZW5jcnlwdFBhc3N3b3JkLFxuICAgICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgICAgfSxcbiAgICAgICAgaWRcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKHJlcywgMjAwLCBcIlN1Y2Nlc3MgY2hhbmdlIHBhc3N3b3JkXCIsIHtcbiAgICAgICAgaWQsXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKFxuICAgICAgICByZXMsXG4gICAgICAgIDQwMCxcbiAgICAgICAgYEJhZCByZXF1ZXN0ICgke2Vyci5tZXNzYWdlfSlgLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgIH1cbiAgfSxcblxuICBsb2dvdXQ6IGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBsZXQgdG9rZW4gPSByZXEuaGVhZGVycy5hdXRob3JpemF0aW9uO1xuICAgICAgdG9rZW4gPSB0b2tlbi5zcGxpdChcIiBcIilbMV07XG4gICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShyZXMsIDIwMCwgXCJTdWNjZXNzIGxvZ291dFwiLCBudWxsKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKFxuICAgICAgICByZXMsXG4gICAgICAgIDQwMCxcbiAgICAgICAgYEJhZCBSZXF1ZXN0ICgke2Vyci5tZXNzYWdlfSlgLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgIH1cbiAgfSxcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBQSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUNDLE1BQU0sQ0FBQyxDQUFDO0FBQzFCLE1BQU1DLFNBQVMsR0FBR0YsT0FBTyxDQUFDLGFBQWEsQ0FBQztBQUN4QyxNQUFNRyxhQUFhLEdBQUdILE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztBQUN0RCxNQUFNSSxjQUFjLEdBQUdKLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztBQUNwRCxNQUFNSyxNQUFNLEdBQUdMLE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFDaEMsTUFBTTtFQUFFTSxFQUFFLEVBQUVDO0FBQU8sQ0FBQyxHQUFHUCxPQUFPLENBQUMsTUFBTSxDQUFDO0FBQ3RDLE1BQU1RLFNBQVMsR0FBR1IsT0FBTyxDQUFDLG1CQUFtQixD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
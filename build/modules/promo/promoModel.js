const connection = require("../../config/mysql");
module.exports = {
  postPromo: data => new Promise((resolve, reject) => {
    connection.query("INSERT INTO promo SET ?", data, (err, result) => {
      if (!err) {
        const newResult = {
          // id: result.insertId,
          ...data
        };
        resolve(newResult);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  getAllPromo: (limit, offset, search) => new Promise((resolve, reject) => {
    connection.query(`SELECT * FROM promo WHERE name LIKE '%${search}%' LIMIT ? OFFSET ?`, [limit, offset], (err, result) => {
      if (!err) {
        resolve(result);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  getCountPromo: search => new Promise((resolve, reject) => {
    connection.query(`SELECT COUNT(*) AS total FROM promo WHERE name LIKE '%${search}%'`, (err, result) => {
      if (!err) {
        resolve(result[0].total);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  getPromoById: id => new Promise((resolve, reject) => {
    connection.query("SELECT * FROM promo WHERE id = ?", id, (error, result) => {
      if (!error) {
        resolve(result);
      } else {
        reject(new Error(`SQL : ${error.sqlMessage}`));
      }
    });
  }),
  updatePromo: (data, id) => new Promise((resolve, reject) => {
    connection.query("UPDATE promo SET ? WHERE id = ?", [data, id], error => {
      if (!error) {
        const newResult = {
          id,
          ...data
        };
        resolve(newResult);
      } else {
        reject(new Error(`SQL : ${error.sqlMessage}`));
      }
    });
  }),
  deletePromo: id => new Promise((resolve, reject) => {
    connection.query("DELETE FROM promo WHERE id = ?", id, error => {
      if (!error) {
        resolve(id);
      } else {
        reject(new Error(`SQL : ${error.sqlMessage}`));
      }
    });
  })
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25uZWN0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJwb3N0UHJvbW8iLCJkYXRhIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJxdWVyeSIsImVyciIsInJlc3VsdCIsIm5ld1Jlc3VsdCIsIkVycm9yIiwic3FsTWVzc2FnZSIsImdldEFsbFByb21vIiwibGltaXQiLCJvZmZzZXQiLCJzZWFyY2giLCJnZXRDb3VudFByb21vIiwidG90YWwiLCJnZXRQcm9tb0J5SWQiLCJpZCIsImVycm9yIiwidXBkYXRlUHJvbW8iLCJkZWxldGVQcm9tbyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2R1bGVzL3Byb21vL3Byb21vTW9kZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29ubmVjdGlvbiA9IHJlcXVpcmUoXCIuLi8uLi9jb25maWcvbXlzcWxcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwb3N0UHJvbW86IChkYXRhKSA9PlxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbm5lY3Rpb24ucXVlcnkoXCJJTlNFUlQgSU5UTyBwcm9tbyBTRVQgP1wiLCBkYXRhLCAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICBjb25zdCBuZXdSZXN1bHQgPSB7XG4gICAgICAgICAgICAvLyBpZDogcmVzdWx0Lmluc2VydElkLFxuICAgICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJlc29sdmUobmV3UmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBTUUwgOiAke2Vyci5zcWxNZXNzYWdlfWApKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSksXG4gIGdldEFsbFByb21vOiAobGltaXQsIG9mZnNldCwgc2VhcmNoKSA9PlxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbm5lY3Rpb24ucXVlcnkoXG4gICAgICAgIGBTRUxFQ1QgKiBGUk9NIHByb21vIFdIRVJFIG5hbWUgTElLRSAnJSR7c2VhcmNofSUnIExJTUlUID8gT0ZGU0VUID9gLFxuICAgICAgICBbbGltaXQsIG9mZnNldF0sXG4gICAgICAgIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyLnNxbE1lc3NhZ2V9YCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KSxcbiAgZ2V0Q291bnRQcm9tbzogKHNlYXJjaCkgPT5cbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25uZWN0aW9uLnF1ZXJ5KFxuICAgICAgICBgU0VMRUNUIENPVU5UKCopIEFTIHRvdGFsIEZST00gcHJvbW8gV0hFUkUgbmFtZSBMSUtFICclJHtzZWFyY2h9JSdgLFxuICAgICAgICAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgICBpZiAoIWVycikge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHRbMF0udG90YWwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBTUUwgOiAke2Vyci5zcWxNZXNzYWdlfWApKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSksXG4gIGdldFByb21vQnlJZDogKGlkKSA9PlxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbm5lY3Rpb24ucXVlcnkoXG4gICAgICAgIFwiU0VMRUNUICogRlJPTSBwcm9tbyBXSEVSRSBpZCA9ID9cIixcbiAgICAgICAgaWQsXG4gICAgICAgIChlcnJvciwgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBTUUwgOiAke2Vycm9yLnNxbE1lc3NhZ2V9YCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KSxcbiAgdXBkYXRlUHJvbW86IChkYXRhLCBpZCkgPT5cbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25uZWN0aW9uLnF1ZXJ5KFxuICAgICAgICBcIlVQREFURSBwcm9tbyBTRVQgPyBXSEVSRSBpZCA9ID9cIixcbiAgICAgICAgW2RhdGEsIGlkXSxcbiAgICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgY29uc3QgbmV3UmVzdWx0ID0ge1xuICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXNvbHZlKG5ld1Jlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyb3Iuc3FsTWVzc2FnZX1gKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pLFxuICBkZWxldGVQcm9tbzogKGlkKSA9PlxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbm5lY3Rpb24ucXVlcnkoXCJERUxFVEUgRlJPTSBwcm9tbyBXSEVSRSBpZCA9ID9cIiwgaWQsIChlcnJvcikgPT4ge1xuICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgcmVzb2x2ZShpZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgU1FMIDog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
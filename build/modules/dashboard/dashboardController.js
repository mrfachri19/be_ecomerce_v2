const dashboardModel = require("./dashboardModel");
const helperWrapper = require("../../helpers/wrapper");
const moment = require("moment");
const listDay = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
const listMonth = ["January", "February", "March", "April", "May", "June", "July", "august", "september", "October", "November", "December"];
const sortListDataDay = (listDay, data) => {
  const result = [];
  for (const i of listDay) {
    let res = 0;
    for (const j of data) {
      if (i === j.day) {
        res += 1;
        result.push({
          day: j.day,
          total: j.total
        });
      }
    }
    if (res === 0) {
      result.push({
        day: i,
        total: 0
      });
    }
  }
  return result;
};
const sortListDataMonth = (listMonth, data) => {
  const result = [];
  for (const i of listMonth) {
    let res = 0;
    for (const j of data) {
      if (i === j.month) {
        res += 1;
        result.push({
          month: j.month,
          total: j.total
        });
      }
    }
    if (res === 0) {
      result.push({
        month: i,
        total: 0
      });
    }
  }
  return result;
};
module.exports = {
  getDashboard: async (req, res) => {
    try {
      let {
        filter
      } = req.query;
      filter = filter || "monthly";
      if (filter === "daily") {
        const result = await dashboardModel.getDashboard(filter);
        let newResult = result.map(item => {
          return {
            total: Number(item.total),
            day: moment(item.day).format("dddd")
          };
        });
        newResult = sortListDataDay(listDay, newResult);
        return helperWrapper.response(res, 200, "Success get data dashboard", newResult);
      } else if (filter === "weekly") {
        const result = await dashboardModel.getDashboard(filter);
        let newResult = result.map(item => {
          return {
            total: Number(item.total),
            month: moment(item.month).format("MMMM")
          };
        });
        newResult = sortListDataMonth(listMonth, newResult);
        return helperWrapper.response(res, 200, "Success get data dashboard", newResult);
      } else if (filter === "monthly") {
        const result = await dashboardModel.getDashboard(filter);
        let newResult = result.map(item => {
          return {
            total: Number(item.total),
            month: moment(item.month).format("MMMM")
          };
        });
        newResult = sortListDataMonth(listMonth, newResult);
        return helperWrapper.response(res, 200, "Success get data dashboard", newResult);
      } else {
        const result = await dashboardModel.getDashboard(filter);
        const newResult = sortListDataMonth(listMonth, result);
        return helperWrapper.response(res, 200, "Success get data dashboard", newResult);
      }
    } catch (error) {
      return helperWrapper.response(res, 400, `Bad Request ${error.message}`, null);
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkYXNoYm9hcmRNb2RlbCIsInJlcXVpcmUiLCJoZWxwZXJXcmFwcGVyIiwibW9tZW50IiwibGlzdERheSIsImxpc3RNb250aCIsInNvcnRMaXN0RGF0YURheSIsImRhdGEiLCJyZXN1bHQiLCJpIiwicmVzIiwiaiIsImRheSIsInB1c2giLCJ0b3RhbCIsInNvcnRMaXN0RGF0YU1vbnRoIiwibW9udGgiLCJtb2R1bGUiLCJleHBvcnRzIiwiZ2V0RGFzaGJvYXJkIiwicmVxIiwiZmlsdGVyIiwicXVlcnkiLCJuZXdSZXN1bHQiLCJtYXAiLCJpdGVtIiwiTnVtYmVyIiwiZm9ybWF0IiwicmVzcG9uc2UiLCJlcnJvciIsIm1lc3NhZ2UiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kdWxlcy9kYXNoYm9hcmQvZGFzaGJvYXJkQ29udHJvbGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkYXNoYm9hcmRNb2RlbCA9IHJlcXVpcmUoXCIuL2Rhc2hib2FyZE1vZGVsXCIpO1xuY29uc3QgaGVscGVyV3JhcHBlciA9IHJlcXVpcmUoXCIuLi8uLi9oZWxwZXJzL3dyYXBwZXJcIik7XG5jb25zdCBtb21lbnQgPSByZXF1aXJlKFwibW9tZW50XCIpO1xuXG5jb25zdCBsaXN0RGF5ID0gW1xuICBcIk1vbmRheVwiLFxuICBcIlR1ZXNkYXlcIixcbiAgXCJXZWRuZXNkYXlcIixcbiAgXCJUaHVyc2RheVwiLFxuICBcIkZyaWRheVwiLFxuICBcIlNhdHVyZGF5XCIsXG4gIFwiU3VuZGF5XCIsXG5dO1xuY29uc3QgbGlzdE1vbnRoID0gW1xuICBcIkphbnVhcnlcIixcbiAgXCJGZWJydWFyeVwiLFxuICBcIk1hcmNoXCIsXG4gIFwiQXByaWxcIixcbiAgXCJNYXlcIixcbiAgXCJKdW5lXCIsXG4gIFwiSnVseVwiLFxuICBcImF1Z3VzdFwiLFxuICBcInNlcHRlbWJlclwiLFxuICBcIk9jdG9iZXJcIixcbiAgXCJOb3ZlbWJlclwiLFxuICBcIkRlY2VtYmVyXCIsXG5dO1xuXG5jb25zdCBzb3J0TGlzdERhdGFEYXkgPSAobGlzdERheSwgZGF0YSkgPT4ge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgZm9yIChjb25zdCBpIG9mIGxpc3REYXkpIHtcbiAgICBsZXQgcmVzID0gMDtcbiAgICBmb3IgKGNvbnN0IGogb2YgZGF0YSkge1xuICAgICAgaWYgKGkgPT09IGouZGF5KSB7XG4gICAgICAgIHJlcyArPSAxO1xuICAgICAgICByZXN1bHQucHVzaCh7IGRheTogai5kYXksIHRvdGFsOiBqLnRvdGFsIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVzID09PSAwKSB7XG4gICAgICByZXN1bHQucHVzaCh7IGRheTogaSwgdG90YWw6IDAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5jb25zdCBzb3J0TGlzdERhdGFNb250aCA9IChsaXN0TW9udGgsIGRhdGEpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAoY29uc3QgaSBvZiBsaXN0TW9udGgpIHtcbiAgICBsZXQgcmVzID0gMDtcbiAgICBmb3IgKGNvbnN0IGogb2YgZGF0YSkge1xuICAgICAgaWYgKGkgPT09IGoubW9udGgpIHtcbiAgICAgICAgcmVzICs9IDE7XG4gICAgICAgIHJlc3VsdC5wdXNoKHsgbW9udGg6IGoubW9udGgsIHRvdGFsOiBqLnRvdGFsIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVzID09PSAwKSB7XG4gICAgICByZXN1bHQucHVzaCh7IG1vbnRoOiBpLCB0b3RhbDogMCB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXREYXNoYm9hcmQ6IGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBsZXQgeyBmaWx0ZXIgfSA9IHJlcS5xdWVyeTtcblxuICAgICAgZmlsdGVyID0gZmlsdGVyIHx8IFwibW9udGhseVwiO1xuXG4gICAgICBpZiAoZmlsdGVyID09PSBcImRhaWx5XCIpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGFzaGJvYXJkTW9kZWwuZ2V0RGFzaGJvYXJkKGZpbHRlcik7XG4gICAgICAgIGxldCBuZXdSZXN1bHQgPSByZXN1bHQubWFwKChpdGVtKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvdGFsOiBOdW1iZXIoaXRlbS50b3RhbCksXG4gICAgICAgICAgICBkYXk6IG1vbWVudChpdGVtLmRheSkuZm9ybWF0KFwiZGRkZFwiKSxcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgICAgICBuZXdSZXN1bHQgPSBzb3J0TGlzdERhdGFEYXkobGlzdERheSwgbmV3UmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UoXG4gICAgICAgICAgcmVzLFxuICAgICAgICAgIDIwMCxcbiAgICAgICAgICBcIlN1Y2Nlc3MgZ2V0IGRhdGEgZGFzaGJvYXJkXCIsXG4gICAgICAgICAgbmV3UmVzdWx0XG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKGZpbHRlciA9PT0gXCJ3ZWVrbHlcIikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkYXNoYm9hcmRNb2RlbC5nZXREYXNoYm9hcmQoZmlsdGVyKTtcbiAgICAgICAgbGV0IG5ld1Jlc3VsdCA9IHJlc3VsdC5tYXAoKGl0ZW0pID0+IHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG90YWw6IE51bWJlcihpdGVtLnRvdGFsKSxcbiAgICAgICAgICAgIG1vbnRoOiBtb21lbnQoaXRlbS5tb250aCkuZm9ybWF0KFwiTU1NTVwiKSxcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgbmV3UmVzdWx0ID0gc29ydExpc3REYXRhTW9udGgobGlzdE1vbnRoLCBuZXdSZXN1bHQpO1xuICAgICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShcbiAgICAgICAgICByZXMsXG4gICAgICAgICAgMjAwLFxuICAgICAgICAgIFwiU3VjY2VzcyBnZXQgZGF0YSBkYXNoYm9hcmRcIixcbiAgICAgICAgICBuZXdSZXN1bHRcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoZmlsdGVyID09PSBcIm1vbnRobHlcIikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkYXNoYm9hcmRNb2RlbC5nZXREYXNoYm9hcmQoZmlsdGVyKTtcbiAgICAgICAgbGV0IG5ld1Jlc3VsdCA9IHJlc3VsdC5tYXAoKGl0ZW0pID0+IHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG90YWw6IE51bWJlcihpdGVtLnRvdGFsKSxcbiAgICAgICAgICAgIG1vbnRoOiBtb21lbnQoaXRlbS5tb250aCkuZm9ybWF0KFwiTU1NTVwiKSxcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgICAgICBuZXdSZXN1bHQgPSBzb3J0TGlzdERhdGFNb250aChsaXN0TW9udGgsIG5ld1Jlc3VsdCk7XG4gICAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKFxuICAgICAgICAgIHJlcyxcbiAgICAgICAgICAyMDAsXG4gICAgICAgICAgXCJTdWNjZXNzIGdldCBkYXRhIGRhc2hib2FyZFwiLFxuICAgICAgICAgIG5ld1Jlc3VsdFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGFzaGJvYXJkTW9kZWwuZ2V0RGFzaGJvYXJkKGZpbHRlcik7XG4gICAgICAgIGNvbnN0IG5ld1Jlc3VsdCA9IHNvcnRMaXN0RGF0YU1vbnRoKGxpc3RNb250aCwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UoXG4gICAgICAgICAgcmVzLFxuICAgICAgICAgIDIwMCxcbiAgICAgICAgICBcIlN1Y2Nlc3MgZ2V0IGRhdGEgZGFzaGJvYXJkXCIsXG4gICAgICAgICAgbmV3UmVzdWx0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKFxuICAgICAgICByZXMsXG4gICAgICAgIDQwMCxcbiAgICAgICAgYEJhZCBSZXF1ZXN0ICR7ZXJyb3IubWVzc2FnZX1gLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgIH1cbiAgfSxcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLGNBQWMsR0FBR0MsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBQ2xELE1BQU1DLGFBQWEsR0FBR0QsT0FBTyxDQUFDLHVCQUF1QixDQUFDO0FBQ3RELE1BQU1FLE1BQU0sR0FBR0YsT0FBTyxDQUFDLFFBQVEsQ0FBQztBQUVoQyxNQUFNRyxPQUFPLEdBQUcsQ0FDZCxRQUFRLEVBQ1IsU0FBUyxFQUNULFdBQVcsRUFDWCxVQUFVLEVBQ1YsUUFBUSxFQUNSLFVBQVUsRUFDVixRQUFRLENBQ1Q7QUFDRCxNQUFNQyxTQUFTLEdBQUcsQ0FDaEIsU0FBUyxFQUNULFVBQVUsRUFDVixPQUFPLEVBQ1AsT0FBTyxFQUNQLEtBQUssRUFDTCxNQUFNLEVBQ04sTUFBTSxFQUNOLFFBQVEsRUFDUixXQUFXLEVBQ1gsU0FBUyxFQUNULFVBQVUsRUFDVixVQUFVLENBQ1g7QUFFRCxNQUFNQyxlQUFlLEdBQUdBLENBQUNGLE9BQU8sRUFBRUcsSUFBSSxLQUFLO0VBQ3pDLE1BQU1DLE1BQU0sR0FBRyxFQUFFO0VBQ2pCLEtBQUssTUFBTUMsQ0FBQyxJQUFJTCxPQUFPLEVBQUU7SUFDdkIsSUFBSU0sR0FBRyxHQUFHLENBQUM7SUFDWCxLQUFLLE1BQU1DLENBQUMsSUFBSUosSUFBSSxFQUFFO01BQ3BCLElBQUlFLENBQUMsS0FBS0UsQ0FBQyxDQUFDQyxHQUFHLEVBQUU7UUFDZkYsR0FBRyxJQUFJLENBQUM7UUFDUkYsTUFBTSxDQUFDSyxJQUFJLENBQUM7VUFBRUQsR0FBRyxFQUFFRCxDQUFDLENBQUNDLEdBQUc7VUFBRUUsS0FBSyxFQUFF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
const connection = require("../../config/mysql");
module.exports = {
  getAllProduct: (category, search, sort, order, limit, offset) => new Promise((resolve, reject) => {
    connection.query(`SELECT * FROM product WHERE category LIKE '%${category}%' AND name LIKE ? ORDER BY ${sort} ${order} LIMIT ? OFFSET ?`, [`%${search}%`, limit, offset], (error, result) => {
      if (!error) {
        resolve(result);
      } else {
        reject(new Error(`SQL: ${error.sqlMassage}`));
      }
    });
  }),
  getProductById: id => new Promise((resolve, reject) => {
    connection.query("SELECT * FROM product WHERE id = ?", id, (error, result) => {
      if (!error) {
        resolve(result);
      } else {
        reject(new Error(`SQL: ${error.sqlMassage}`));
      }
    });
  }),
  getCountProduct: (category, search) => new Promise((resolve, reject) => {
    connection.query(`SELECT COUNT (*) AS total FROM product WHERE category LIKE '%${category}%' AND name LIKE ?`, [`%${search}%`], (error, result) => {
      if (!error) {
        resolve(result[0].total);
      } else {
        reject(new Error(`SQL: ${error.sqlMassage}`));
      }
    });
  }),
  postProduct: data => new Promise((resolve, reject) => {
    connection.query("INSERT INTO product SET ?", data, (error, result) => {
      if (!error) {
        const newResult = {
          id: result.insertId,
          ...data
        };
        resolve(newResult);
      } else {
        reject(new Error(`SQL : ${error.sqlMessage}`));
      }
    });
  }),
  updateProduct: (data, id) => new Promise((resolve, reject) => {
    connection.query("UPDATE product SET ? WHERE id = ?", [data, id], error => {
      if (!error) {
        const newResult = {
          id,
          ...data
        };
        resolve(newResult);
      } else {
        reject(new Error(`SQL : ${error.sqlMessage}`));
      }
    });
  }),
  deleteProduct: id => new Promise((resolve, reject) => {
    connection.query("DELETE FROM product WHERE id = ?", id, error => {
      if (!error) {
        resolve(id);
      } else {
        reject(new Error(`SQL : ${error.sqlMessage}`));
      }
    });
  })
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25uZWN0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRBbGxQcm9kdWN0IiwiY2F0ZWdvcnkiLCJzZWFyY2giLCJzb3J0Iiwib3JkZXIiLCJsaW1pdCIsIm9mZnNldCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicXVlcnkiLCJlcnJvciIsInJlc3VsdCIsIkVycm9yIiwic3FsTWFzc2FnZSIsImdldFByb2R1Y3RCeUlkIiwiaWQiLCJnZXRDb3VudFByb2R1Y3QiLCJ0b3RhbCIsInBvc3RQcm9kdWN0IiwiZGF0YSIsIm5ld1Jlc3VsdCIsImluc2VydElkIiwic3FsTWVzc2FnZSIsInVwZGF0ZVByb2R1Y3QiLCJkZWxldGVQcm9kdWN0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZHVsZXMvcHJvZHVjdC9wcm9kdWN0TW9kZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29ubmVjdGlvbiA9IHJlcXVpcmUoXCIuLi8uLi9jb25maWcvbXlzcWxcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRBbGxQcm9kdWN0OiAoY2F0ZWdvcnksIHNlYXJjaCwgc29ydCwgb3JkZXIsIGxpbWl0LCBvZmZzZXQpID0+XG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29ubmVjdGlvbi5xdWVyeShcbiAgICAgICAgYFNFTEVDVCAqIEZST00gcHJvZHVjdCBXSEVSRSBjYXRlZ29yeSBMSUtFICclJHtjYXRlZ29yeX0lJyBBTkQgbmFtZSBMSUtFID8gT1JERVIgQlkgJHtzb3J0fSAke29yZGVyfSBMSU1JVCA/IE9GRlNFVCA/YCxcbiAgICAgICAgW2AlJHtzZWFyY2h9JWAsIGxpbWl0LCBvZmZzZXRdLFxuICAgICAgICAoZXJyb3IsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgU1FMOiAke2Vycm9yLnNxbE1hc3NhZ2V9YCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KSxcbiAgZ2V0UHJvZHVjdEJ5SWQ6IChpZCkgPT5cbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25uZWN0aW9uLnF1ZXJ5KFxuICAgICAgICBcIlNFTEVDVCAqIEZST00gcHJvZHVjdCBXSEVSRSBpZCA9ID9cIixcbiAgICAgICAgaWQsXG4gICAgICAgIChlcnJvciwgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBTUUw6ICR7ZXJyb3Iuc3FsTWFzc2FnZX1gKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pLFxuICBnZXRDb3VudFByb2R1Y3Q6IChjYXRlZ29yeSwgc2VhcmNoKSA9PlxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbm5lY3Rpb24ucXVlcnkoXG4gICAgICAgIGBTRUxFQ1QgQ09VTlQgKCopIEFTIHRvdGFsIEZST00gcHJvZHVjdCBXSEVSRSBjYXRlZ29yeSBMSUtFICclJHtjYXRlZ29yeX0lJyBBTkQgbmFtZSBMSUtFID9gLFxuICAgICAgICBbYCUke3NlYXJjaH0lYF0sXG4gICAgICAgIChlcnJvciwgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHRbMF0udG90YWwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBTUUw6ICR7ZXJyb3Iuc3FsTWFzc2FnZX1gKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pLFxuICBwb3N0UHJvZHVjdDogKGRhdGEpID0+XG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29ubmVjdGlvbi5xdWVyeShcIklOU0VSVCBJTlRPIHByb2R1Y3QgU0VUID9cIiwgZGF0YSwgKGVycm9yLCByZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgIGNvbnN0IG5ld1Jlc3VsdCA9IHtcbiAgICAgICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0SWQsXG4gICAgICAgICAgICAuLi5kYXRhLFxuICAgICAgICAgIH07XG4gICAgICAgICAgcmVzb2x2ZShuZXdSZXN1bHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyb3Iuc3FsTWVzc2FnZX1gKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pLFxuICB1cGRhdGVQcm9kdWN0OiAoZGF0YSwgaWQpID0+XG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29ubmVjdGlvbi5xdWVyeShcbiAgICAgICAgXCJVUERBVEUgcHJvZHVjdCBTRVQgPyBXSEVSRSBpZCA9ID9cIixcbiAgICAgICAgW2RhdGEsIGlkXSxcbiAgICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgY29uc3QgbmV3UmVzdWx0ID0ge1xuICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXNvbHZlKG5ld1Jlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyb3Iuc3FsTWVzc2FnZX1gKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pLFxuICBkZWxldGVQcm9kdWN0OiAoaWQpID0+XG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29ubmVjdGlvbi5xdWVyeShcIkRFTEVURSBGUk9NIHByb2R1Y3QgV0hFUkUgaWQgPSA/XCIsIGlkLCAoZXJyb3IpID0+IHtcbiAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgIHJlc29sdmUoaWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyb3Iuc3FsTWVzc2FnZX1gKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pLFxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsVUFBVSxHQUFHQyxPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFFaERDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZDLGFBQWEsRUFBRUEsQ0FBQ0MsUUFBUSxFQUFFQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sS0FDMUQsSUFBSUMsT0FBTyxDQUFDLENBQUNDLE9BQU8sRUFBRUMsTUFBTSxLQUFLO0lBQy9CYixVQUFVLENBQUNjLEtBQUssQ0FDYiwrQ0FBOENULFFBQVMsK0JBQThCRSxJQUFLLElBQUdDLEtBQU0sbUJBQWtCLEVBQ3RILENBQUUsSUFBR0YsTUFBTyxHQUFFLEVBQUVHLEtBQUssRUFBRUMsTUFBTSxDQUFDLEVBQzlCLENBQUNLLEtBQUssRUFBRUMsTUFBTSxLQUFLO01BQ2pCLElBQUksQ0FBQ0QsS0FBSyxFQUFFO1FBQ1ZILE9BQU8sQ0FBQ0ksTUFBTSxDQUFDO01BQ2pCLENBQUMsTUFBTTtRQUNMSCxNQUFNLENBQUMsSUFBSUksS0FBSyxDQUFFLFFBQU9GLEtBQUssQ0FBQ0csVUFBVyxFQUFDLENBQUMsQ0FBQztNQUMvQztJQUNGLENBQ0YsQ0FBQztFQUNILENBQUMsQ0FBQztFQUNKQyxjQUFjLEVBQUdDLEVBQUUsSUFDakIsSUFBSVQsT0FBTyxDQUFDLENB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
const redis = require("../config/redis");
const helperWrapper = require("../helpers/wrapper");
module.exports = {
  getProductRedis: (req, res, next) => {
    redis.get(`getProduct:${JSON.stringify(req.query)}`, (error, result) => {
      if (!error && result !== null) {
        // eslint-disable-next-line no-console
        console.log("Data is in redis");
        const newResult = JSON.parse(result);
        return helperWrapper.response(res, 200, "Success get data product", newResult.newResult, newResult.pageInfo);
      }
      // eslint-disable-next-line no-console
      console.log("No data in redis");
      next();
    });
  },
  getProductByIdRedis: (req, res, next) => {
    const {
      id
    } = req.params;
    redis.get(`getProduct:${id}`, (error, result) => {
      if (!error && result !== null) {
        // eslint-disable-next-line no-console
        console.log("Data is in redis");
        const newResult = JSON.parse(result);
        return helperWrapper.response(res, 200, "Success get data product by id", newResult);
      }
      // eslint-disable-next-line no-console
      console.log("No data in redis");
      next();
    });
  },
  clearProductRedis: (req, res, next) => {
    redis.keys("getProduct:*", (error, result) => {
      if (result.length > 0) {
        result.forEach(item => {
          redis.del(item);
        });
      }
      next();
    });
  },
  // Promo
  getPromoRedis: (req, res, next) => {
    redis.get(`getPromo:${JSON.stringify(req.query)}`, (err, result) => {
      if (!err && result !== null) {
        console.log("Data ada didalam redis");
        const newResult = JSON.parse(result);
        return helperWrapper.response(res, 200, "Success get data", newResult.result, newResult.pageInfo);
      }
      console.log("Data tidak ada didalam redis");
      next();
    });
  },
  getPromoByIdRedis: (req, res, next) => {
    const {
      id
    } = req.params;
    redis.get(`getPromo:${id}`, (err, result) => {
      if (!err && result !== null) {
        console.log("Data ada didalam redis");
        const newResult = JSON.parse(result);
        return helperWrapper.response(res, 200, "Success get data by id", newResult);
      }
      console.log("Data tidak ada didalam redis");
      next();
    });
  },
  clearPromoRedis: (req, res, next) => {
    redis.keys("getPromo:*", (err, result) => {
      if (result.length > 0) {
        // PROSES DELETE KEYS
        result.forEach(item => {
          redis.del(item);
        });
      }
      next();
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWRpcyIsInJlcXVpcmUiLCJoZWxwZXJXcmFwcGVyIiwibW9kdWxlIiwiZXhwb3J0cyIsImdldFByb2R1Y3RSZWRpcyIsInJlcSIsInJlcyIsIm5leHQiLCJnZXQiLCJKU09OIiwic3RyaW5naWZ5IiwicXVlcnkiLCJlcnJvciIsInJlc3VsdCIsImNvbnNvbGUiLCJsb2ciLCJuZXdSZXN1bHQiLCJwYXJzZSIsInJlc3BvbnNlIiwicGFnZUluZm8iLCJnZXRQcm9kdWN0QnlJZFJlZGlzIiwiaWQiLCJwYXJhbXMiLCJjbGVhclByb2R1Y3RSZWRpcyIsImtleXMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiaXRlbSIsImRlbCIsImdldFByb21vUmVkaXMiLCJlcnIiLCJnZXRQcm9tb0J5SWRSZWRpcyIsImNsZWFyUHJvbW9SZWRpcyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlL3JlZGlzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJlZGlzID0gcmVxdWlyZShcIi4uL2NvbmZpZy9yZWRpc1wiKTtcbmNvbnN0IGhlbHBlcldyYXBwZXIgPSByZXF1aXJlKFwiLi4vaGVscGVycy93cmFwcGVyXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0UHJvZHVjdFJlZGlzOiAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICByZWRpcy5nZXQoYGdldFByb2R1Y3Q6JHtKU09OLnN0cmluZ2lmeShyZXEucXVlcnkpfWAsIChlcnJvciwgcmVzdWx0KSA9PiB7XG4gICAgICBpZiAoIWVycm9yICYmIHJlc3VsdCAhPT0gbnVsbCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLmxvZyhcIkRhdGEgaXMgaW4gcmVkaXNcIik7XG4gICAgICAgIGNvbnN0IG5ld1Jlc3VsdCA9IEpTT04ucGFyc2UocmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UoXG4gICAgICAgICAgcmVzLFxuICAgICAgICAgIDIwMCxcbiAgICAgICAgICBcIlN1Y2Nlc3MgZ2V0IGRhdGEgcHJvZHVjdFwiLFxuICAgICAgICAgIG5ld1Jlc3VsdC5uZXdSZXN1bHQsXG4gICAgICAgICAgbmV3UmVzdWx0LnBhZ2VJbmZvXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS5sb2coXCJObyBkYXRhIGluIHJlZGlzXCIpO1xuICAgICAgbmV4dCgpO1xuICAgIH0pO1xuICB9LFxuICBnZXRQcm9kdWN0QnlJZFJlZGlzOiAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICBjb25zdCB7IGlkIH0gPSByZXEucGFyYW1zO1xuICAgIHJlZGlzLmdldChgZ2V0UHJvZHVjdDoke2lkfWAsIChlcnJvciwgcmVzdWx0KSA9PiB7XG4gICAgICBpZiAoIWVycm9yICYmIHJlc3VsdCAhPT0gbnVsbCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLmxvZyhcIkRhdGEgaXMgaW4gcmVkaXNcIik7XG4gICAgICAgIGNvbnN0IG5ld1Jlc3VsdCA9IEpTT04ucGFyc2UocmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UoXG4gICAgICAgICAgcmVzLFxuICAgICAgICAgIDIwMCxcbiAgICAgICAgICBcIlN1Y2Nlc3MgZ2V0IGRhdGEgcHJvZHVjdCBieSBpZFwiLFxuICAgICAgICAgIG5ld1Jlc3VsdFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUubG9nKFwiTm8gZGF0YSBpbiByZWRpc1wiKTtcbiAgICAgIG5leHQoKTtcbiAgICB9KTtcbiAgfSxcbiAgY2xlYXJQcm9kdWN0UmVkaXM6IChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgIHJlZGlzLmtleXMoXCJnZXRQcm9kdWN0OipcIiwgKGVycm9yLCByZXN1bHQpID0+IHtcbiAgICAgIGlmIChyZXN1bHQubGVuZ3RoID4gMCkge1xuICAgICAgICByZXN1bHQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgIHJlZGlzLmRlbChpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBuZXh0KCk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLy8gUHJvbW9cbiAgZ2V0UHJvbW9SZWRpczogKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgcmVkaXMuZ2V0KGBnZXRQcm9tbzoke0pTT04uc3RyaW5naWZ5KHJlcS5xdWVyeSl9YCwgKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICBpZiAoIWVyciAmJiByZXN1bHQgIT09IG51bGwpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJEYXRhIGFkYSBkaWRhbGFtIHJlZGlzXCIpO1xuICAgICAgICBjb25zdCBuZXdSZXN1bHQgPSBKU09OLnBhcnNlKHJlc3VsdCk7XG4gICAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKFxuICAgICAgICAgIHJlcyxcbiAgICAgICAgICAyMDAsXG4gICAgICAgICAgXCJTdWNjZXNzIGdldCBkYXRhXCIsXG4gICAgICAgICAgbmV3UmVzdWx0LnJlc3VsdCxcbiAgICAgICAgICBuZXdSZXN1bHQucGFnZUluZm9cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnNvbGUubG9nKFwiRGF0YSB0aWRhayBhZGEgZGlkYWxhbSByZWRpc1wiKTtcbiAgICAgIG5leHQoKTtcbiAgICB9KTtcbiAgfSxcblxuICBnZXRQcm9tb0J5SWRSZWRpczogKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgY29uc3QgeyBpZCB9ID0gcmVxLnBhcmFtcztcblxuICAgIHJlZGlzLmdldChgZ2V0UHJvbW86JHtpZH1gLCAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgIGlmICghZXJyICYmIHJlc3VsdCAhPT0gbnVsbCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkRhdGEgYWRhIGRpZGFsYW0gcmVkaXNcIik7XG4gICAgICAgIGNvbnN0IG5ld1Jlc3VsdCA9IEpTT04ucGFyc2UocmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UoXG4gICAgICAgICAgcmVzLFxuICAgICAgICAgIDIwMCxcbiAgICAgICAgICBcIlN1Y2Nlc3MgZ2V0IGRhdGEgYnkgaWRcIixcbiAgICAgICAgICBuZXdSZXN1bHRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnNvbGUubG9nKFwiRGF0YSB0aWRhayBhZGEgZGlkYWxhbSByZWRpc1wiKTtcbiAgICAgIG5leHQoKTtcbiAgICB9KTtcbiAgfSxcblxuICBjbGVhclByb21vUmVkaXM6IChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgIHJlZGlzLmtleXMoXCJnZXRQcm9tbzoqXCIsIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIFBST1NFUyBERUxFVEUgS0VZU1xuICAgICAgICByZXN1bHQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgIHJlZGlzLmRlbChpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBuZXh0KCk7XG4gICAgfSk7XG4gIH0sXG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztBQUN4QyxNQUFNQyxhQUFhLEdBQUdELE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztBQUVuREUsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZkMsZUFBZSxFQUFFQSxDQUFDQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsSUFBSSxLQUFLO0lBQ25DUixLQUFLLENBQUNTLEdBQUcsQ0FBRSxjQUFhQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0wsR0FBRyxDQUFDTSxLQUFLLENBQUUsRUFBQyxF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
const multer = require("multer");
const helperWrapper = require("../helpers/wrapper/index");
const storage = multer.diskStorage({
  destination(req, file, cb) {
    cb(null, "public/uploads/promo");
  },
  filename(req, file, cb) {
    cb(null, new Date().toISOString().replace(/:/g, "-") + file.originalname);
  }
});
const upload = multer({
  storage,
  fileFilter: (req, file, cb) => {
    if (file.mimetype === "image/png" || file.mimetype === "image/jpg" || file.mimetype === "image/jpeg") {
      cb(null, true);
    } else {
      cb(null, false);
      return cb(new Error("Only .png, .jpg and .jpeg format allowed!"));
    }
  },
  limits: {
    fileSize: 1024 * 1024
  }
}).single("image");
const uploadFilter = (req, res, next) => {
  upload(req, res, err => {
    if (err instanceof multer.MulterError) {
      // A Multer error occurred when uploading.
      return helperWrapper.response(res, 401, err.message, null);
    }
    if (err) {
      // An unknown error occurred when uploading.
      return helperWrapper.response(res, 401, err.message, null);
    }
    next();
    // Everything went fine.
  });
};

module.exports = uploadFilter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtdWx0ZXIiLCJyZXF1aXJlIiwiaGVscGVyV3JhcHBlciIsInN0b3JhZ2UiLCJkaXNrU3RvcmFnZSIsImRlc3RpbmF0aW9uIiwicmVxIiwiZmlsZSIsImNiIiwiZmlsZW5hbWUiLCJEYXRlIiwidG9JU09TdHJpbmciLCJyZXBsYWNlIiwib3JpZ2luYWxuYW1lIiwidXBsb2FkIiwiZmlsZUZpbHRlciIsIm1pbWV0eXBlIiwiRXJyb3IiLCJsaW1pdHMiLCJmaWxlU2l6ZSIsInNpbmdsZSIsInVwbG9hZEZpbHRlciIsInJlcyIsIm5leHQiLCJlcnIiLCJNdWx0ZXJFcnJvciIsInJlc3BvbnNlIiwibWVzc2FnZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbWlkZGxld2FyZS91cGxvYWRQcm9tby5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtdWx0ZXIgPSByZXF1aXJlKFwibXVsdGVyXCIpO1xuY29uc3QgaGVscGVyV3JhcHBlciA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3dyYXBwZXIvaW5kZXhcIik7XG5cbmNvbnN0IHN0b3JhZ2UgPSBtdWx0ZXIuZGlza1N0b3JhZ2Uoe1xuICBkZXN0aW5hdGlvbihyZXEsIGZpbGUsIGNiKSB7XG4gICAgY2IobnVsbCwgXCJwdWJsaWMvdXBsb2Fkcy9wcm9tb1wiKTtcbiAgfSxcblxuICBmaWxlbmFtZShyZXEsIGZpbGUsIGNiKSB7XG4gICAgY2IobnVsbCwgbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnJlcGxhY2UoLzovZywgXCItXCIpICsgZmlsZS5vcmlnaW5hbG5hbWUpO1xuICB9LFxufSk7XG5cbmNvbnN0IHVwbG9hZCA9IG11bHRlcih7XG4gIHN0b3JhZ2UsXG4gIGZpbGVGaWx0ZXI6IChyZXEsIGZpbGUsIGNiKSA9PiB7XG4gICAgaWYgKFxuICAgICAgZmlsZS5taW1ldHlwZSA9PT0gXCJpbWFnZS9wbmdcIiB8fFxuICAgICAgZmlsZS5taW1ldHlwZSA9PT0gXCJpbWFnZS9qcGdcIiB8fFxuICAgICAgZmlsZS5taW1ldHlwZSA9PT0gXCJpbWFnZS9qcGVnXCJcbiAgICApIHtcbiAgICAgIGNiKG51bGwsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYihudWxsLCBmYWxzZSk7XG4gICAgICByZXR1cm4gY2IobmV3IEVycm9yKFwiT25seSAucG5nLCAuanBnIGFuZCAuanBlZyBmb3JtYXQgYWxsb3dlZCFcIikpO1xuICAgIH1cbiAgfSxcbiAgbGltaXRzOiB7IGZpbGVTaXplOiAxMDI0ICogMTAyNCB9LFxufSkuc2luZ2xlKFwiaW1hZ2VcIik7XG5cbmNvbnN0IHVwbG9hZEZpbHRlciA9IChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICB1cGxvYWQocmVxLCByZXMsIChlcnIpID0+IHtcbiAgICBpZiAoZXJyIGluc3RhbmNlb2YgbXVsdGVyLk11bHRlckVycm9yKSB7XG4gICAgICAvLyBBIE11bHRlciBlcnJvciBvY2N1cnJlZCB3aGVuIHVwbG9hZGluZy5cbiAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKHJlcywgNDAxLCBlcnIubWVzc2FnZSwgbnVsbCk7XG4gICAgfVxuICAgIGlmIChlcnIpIHtcbiAgICAgIC8vIEFuIHVua25vd24gZXJyb3Igb2NjdXJyZWQgd2hlbiB1cGxvYWRpbmcuXG4gICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShyZXMsIDQwMSwgZXJyLm1lc3NhZ2UsIG51bGwpO1xuICAgIH1cbiAgICBuZXh0KCk7XG4gICAgLy8gRXZlcnl0aGluZyB3ZW50IGZpbmUuXG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB1cGxvYWRGaWx0ZXI7XG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFFBQVEsQ0FBQztBQUNoQyxNQUFNQyxhQUFhLEdBQUdELE9BQU8sQ0FBQywwQkFBMEIsQ0FBQztBQUV6RCxNQUFNRSxPQUFPLEdBQUdILE1BQU0sQ0FBQ0ksV0FBVyxDQUFDO0VBQ2pDQyxXQUFXQSxDQUFDQyxHQUFHLEVBQUVDLElBQUksRUFBRUMsRUFBRSxFQUFFO0lBQ3pCQSxFQUFFLENBQUMsSUFBSSxFQUFFLHNCQUFzQixDQUFDO0VBQ2xDLENBQUM7RUFFREMsUUFBUUEsQ0FBQ0gsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLEVBQUUsRUFBRTtJQUN0QkEsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJRSxJQUFJLENBQUMsQ0FBQyxDQUFDQyxXQUFXLENBQUMsQ0FBQyxDQUFDQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHTCxJQUFJLENBQUNNLFlBQVksQ0FBQztFQUMzRTtBQUNGLENBQUMsQ0FBQztBQUVGLE1BQU1DLE1BQU0sR0FBR2QsTUFBTSxDQUFDO0VBQ3BCRyxPQUFPO0VBQ1BZLFVBQVUsRUFBRUEsQ0FBQ1QsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLEVBQUUsS0FBSztJQUM3QixJQUNFRCxJQUFJLENBQUNTLFFBQVEsS0FBSyxXQUFXLElBQzdCVCxJQUFJLENBQUNTLFFBQVEsS0FBSyxXQUFXLElBQzdCVCxJQUFJLENBQUNTLFFBQVEsS0FBSyxZQUFZLEVBQzlCO01BQ0FSLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0lBQ2hCLENBQUMsTUFBTTtNQUNMQSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztNQUNmLE9BQU9BLEVBQUUsQ0FBQyxJQUFJUyxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQztJQUNuRTtFQUNGLENBQUM7RUFDREMsTUFBTSxFQUFFO0lBQUVDLFFBQVEsRUFBRSxJQUFJLEdBQUc7RUFBSztBQUNsQyxDQUFDLENBQUMsQ0FBQ0MsTUFBTSxDQUFDLE9BQU8sQ0FBQztBQUVsQixNQUFNQyxZQUFZLEdBQUdBLENBQUNmLEdBQUcsRUFBRWdCLEdBQUcsRUFBRUMsSUFBSSxLQUFLO0VBQ3ZDVCxNQUFNLENBQUNSLEdBQUcsRUFBRWdCLEdBQUcsRUFBR0UsR0FBRyxJQUFLO0lBQ3hCLElBQUlBLEdBQUcsWUFBWXhCLE1BQU0sQ0FBQ3lCLFdBQVcsRUFBRTtNQUNyQztNQUNBLE9BQU92QixhQUFhLENBQUN3QixRQUFRLENBQUNKLEdBQUcsRUFBRSxHQUFHLEVBQUVFLEdBQUcsQ0FBQ0csT0FBTyxFQUFFLElBQUksQ0FBQztJQUM1RDtJQUNBLElBQUlILEdBQUcsRUFBRTtNQUNQO01BQ0EsT0FBT3RCLGFBQWEsQ0FBQ3dCLFFBQVEsQ0FBQ0osR0FBRyxFQUFFLEdBQUcsRUFBRUUsR0FBRyxDQUFDRyxPQUFPLEVBQUUsSUFBSSxDQUFDO0lBQzVEO0lBQ0FKLElBQUksQ0FBQyxDQUFDO0lBQ047RUFDRixDQUFDLENBQUM7QUFDSixDQUFDOztBQUVESyxNQUFNLENBQUNDLE9BQU8sR0FBR1IsWUFBWSJ9